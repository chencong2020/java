<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--    logback上下文名称-->
    <contextName>${SERVER_NAME}</contextName>
    <!--    日志文件名称-->
    <property name="SERVER_NAME" value="springboot-study"/>
    <!--    日志存放路径-->
    <property name="LOG_PATH" value="logs/${SERVER_NAME}"/>
    <!--
     日志输出格式：
			%d表示日期时间，
			%thread表示线程名，
			%-5level：级别从左显示5个字符宽度
			%logger{50} 表示logger名字最长50个字符，否则按照句点分割。
			%msg：日志消息，
			%n是换行符
	-->
    <property name="CONSOLE_LOG_PATTERN"
              value="%date{yyyy-MM-dd HH:mm:ss} | %highlight(%-5level) | %boldYellow(%thread) | %boldGreen(%logger) | %msg%n"/>
    <!--ch.qos.logback.core.ConsoleAppender 表示控制台输出-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!--<appender name="error" class="ch.qos.logback.core.FileAppender">-->
    <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
    <!--<level>ERROR</level>-->
    <!--</filter>-->
    <!--<encoder>-->
    <!--<pattern>%d{yyyy-mm-dd HH:mm:ss.SSS} [%thread] %highlight(%-5level) %logger{26} - %msg%n</pattern>-->
    <!--</encoder>-->
    <!--</appender>-->

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="APP_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称 -->
        <file>${LOG_PATH}/${SERVER_NAME}.log</file>
        <!--        日志记录器的滚动策略，按日期、大小记录-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--            日志存放路径，%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <fileNamePattern>${LOG_PATH}/${SERVER_NAME}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--            最大日期数，超过时间的文件会自动删除-->
            <maxHistory>30</maxHistory>
            <!--            每个文件最大保存大小，如 10M、100M，若超过此大小，
            日志文件会以索引0开始命名日志文件，如log-error-2019-01-01-0.log-->
            <maxFileSize>2MB</maxFileSize>
            <!--            控制日志文档存储的总大，如 3GB、100M-->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-mm-dd HH:mm:ss.SSS} [%thread] %-5level %logger{16} - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--        高于error级别日志将会保留-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <!--        <file>logs/error.log</file>-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--            最大日期数，超过时间的文件会自动删除-->
            <maxHistory>30</maxHistory>
            <!--            每个文件最大保存大小，如 10M，100M-->
            <maxFileSize>100MB</maxFileSize>
            <!--            控制日志文档存储的总大，如 3GB、100M-->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-mm-dd HH:mm:ss.SSS} [%thread] %-5level %logger{16} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--    日志级别为INFO以上的使用console、app-log、error-log的方式处理日志-->
    <!--    日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出。-->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="APP_LOG"/>
        <appender-ref ref="ERROR_LOG"/>
    </root>

    <!-- logback为java中的包 -->
    <!--<logger name="com.dudu.controller"/>-->
    <!--logback.LogbackDemo：类的全路径 -->
    <!--<logger name="com.dudu.controller.LearnController" level="WARN" additivity="true">-->
    <!--<appender-ref ref="console"/>-->
    <!--</logger>-->

    <!--&lt;!&ndash; 测试环境+开发环境. 多个使用逗号隔开. &ndash;&gt;-->
    <!--<springProfile name="test,dev">-->
    <!--<logger name="com.dudu.controller" level="info" />-->
    <!--</springProfile>-->
    <!--&lt;!&ndash; 生产环境. &ndash;&gt;-->
    <!--<springProfile name="prod">-->
    <!--<logger name="com.dudu.controller" level="ERROR" />-->
    <!--</springProfile>-->

</configuration>